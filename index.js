const dom = {
  testName: document.getElementById("test-name"),
  questionNumber: document.getElementById("question-number"),
  questionBlock: document.getElementById("question-block"),
  question: document.getElementById("question"),
  answers: document.getElementById("answers"),
  btn: document.getElementById("btn"),
  result: document.getElementById("result"),
  resultIcon: document.getElementById("result-icon"),
  resultStatus: document.getElementById("result-status"),
};

//Global variables
let questionCount = 5;
let questionIdx = 1;
let isSelectAnswer = false;
let rightAnswersCount = 0;
let answersCountForTestComplete = 4;
const newQuestionsArr = smashArr(data.questions, questionCount);

//–§—É–Ω–∫—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–π –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —ç–ª-–æ–≤ –º–∞—Å—Å–∏–≤–∞;
// randomArr - –º–∞—Å—Å–∏–≤ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∏;
// count - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —ç–ª-–æ–≤ –≤ –Ω–æ–≤–æ–º –º–∞—Å—Å–∏–≤–µ;
function smashArr(arr, count) {
  let randomArr = [];

  while (arr.length && randomArr.length < count) {
    const maxIdx = arr.length - 1;
    const randomIdx = Math.round(Math.random() * maxIdx);
    const cutQuestionArr = arr.splice(randomIdx, 1);
    randomArr.push(...cutQuestionArr);
  }
  console.log(randomArr);
  return randomArr;
}

//–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–æ–≤;
const renderAnswers = (answers, rightAnswerNumber) => {
  const answersHtml = [];

  for (let i = 0; i < answers.length; i++) {
    if (i + 1 === rightAnswerNumber) {
      answersHtml.push(
        `<div class='test__answer' data-valid>${answers[i]}</div>`
      );
    } else {
      answersHtml.push(`<div class='test__answer'>${answers[i]}</div>`);
    }
  }
  dom.answers.innerHTML = answersHtml.join("");
};

const answers = newQuestionsArr[0].answers;
const rightAnswerNumber = newQuestionsArr[0].rightAnswer;

//–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
function render(data, questionNumber) {
  const { answers, rightAnswer } = data;
  dom.question.innerHTML = data.question;
  dom.questionNumber.innerHTML = questionNumber;
  renderAnswers(answers, rightAnswerNumber);
  blockButton(true);
}

render(newQuestionsArr[0], 1);

console.log(newQuestionsArr[0]);

//–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
dom.btn.onclick = () => {
  const question = newQuestionsArr[questionIdx];
  const nextQuestionIsFinish = newQuestionsArr[questionIdx + 1];
  let questionNumber = questionIdx + 1;
  if (question) {
    render(question, questionNumber);
    questionIdx++;
    isSelectAnswer = !isSelectAnswer;
    if (!nextQuestionIsFinish) {
      changeButton();
    }
  } else {
    renderResult();
  }
};

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–ª–∏–∫ –ø–æ –≤—ã–±–æ—Ä—É –æ—Ç–≤–µ—Ç–∞
dom.answers.onclick = (event) => {
  const isAnswerClick = event.target.classList.contains("test__answer");
  if (isAnswerClick && !isSelectAnswer) {
    renderAnswersStatus(event.target);
    isSelectAnswer = !isSelectAnswer;
    blockButton(false);
  }
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä–∞—Å–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
function renderAnswersStatus(answer) {
  if (answer.dataset.valid !== undefined) {
    answer.classList.add("valid");
    rightAnswersCount++;
  } else {
    const validAnswer = answer.parentNode.querySelector("[data-valid]");
    answer.classList.add("invalid");
    validAnswer.classList.add("valid");
  }
}

// –§—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞, –ø–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –æ—Ç–≤–µ—Ç
function blockButton(isDisable) {
  if (isDisable) {
    dom.btn.classList.add("disable");
  } else {
    dom.btn.classList.remove("disable");
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function changeButton() {
  dom.btn.innerHTML = "–°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç";
  dom.btn.dataset.result = true;
}

// –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–Ω–¥–µ—Ä–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function renderResult() {
  dom.questionBlock.style.display = "none";
  dom.answers.style.display = "none";
  dom.btn.style.display = "none";
  dom.testName.style.display = "none";

  if (testCompleteIsCorrect()) {
    dom.resultIcon.innerHTML = "ü•≥";
    dom.resultStatus.innerHTML = "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!";
    dom.resultStatus.classList.add("valid");
  } else {
    dom.resultIcon.innerHTML = "ü´£";
    dom.resultStatus.innerHTML = "–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!";
    dom.resultStatus.classList.add("invalid");
  }
}

//–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
function testCompleteIsCorrect() {
  return answersCountForTestComplete < rightAnswerNumber;
}
